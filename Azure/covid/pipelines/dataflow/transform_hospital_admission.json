{
	"name": "transform_hospital_admission",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_hospital_admission",
						"type": "DatasetReference"
					},
					"name": "ImportRawHospitalAdmission"
				},
				{
					"dataset": {
						"referenceName": "ds_dates",
						"type": "DatasetReference"
					},
					"name": "ImportDates"
				},
				{
					"dataset": {
						"referenceName": "ds_Lookup_Countries",
						"type": "DatasetReference"
					},
					"name": "ImportCountries"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_weeklyhospitaladmission",
						"type": "DatasetReference"
					},
					"name": "sinkWeekly"
				},
				{
					"dataset": {
						"referenceName": "ds_dailyhospitaladmission",
						"type": "DatasetReference"
					},
					"name": "sinkDaily"
				}
			],
			"transformations": [
				{
					"name": "LookUpCountries"
				},
				{
					"name": "SelectLookUp"
				},
				{
					"name": "split1"
				},
				{
					"name": "PivotIndicatorDaily"
				},
				{
					"name": "PivotIndicatorWeekly"
				},
				{
					"name": "JoinDates"
				},
				{
					"name": "AggregateDim"
				},
				{
					"name": "WeeklySort"
				},
				{
					"name": "DailySort"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string,",
				"          LoadId as string,",
				"          AdlLoadTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ImportRawHospitalAdmission",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ImportDates",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ImportCountries",
				"ImportRawHospitalAdmission, ImportCountries lookup(ImportRawHospitalAdmission@country == ImportCountries@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookUpCountries",
				"LookUpCountries select(mapColumn(",
				"          country = ImportRawHospitalAdmission@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          indicator,",
				"          reported_date = date,",
				"          year_week,",
				"          value,",
				"          source,",
				"          LoadId,",
				"          AdlLoadTime",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectLookUp",
				"SelectLookUp split(contains(split(indicator, ' '),#item=='Weekly'),",
				"     contains(split(indicator, ' '),#item=='Daily'),",
				"     disjoint: false) ~> split1@(weekly, daily)",
				"split1@daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          source,",
				"          LoadId,",
				"          AdlLoadTime),",
				"     pivotBy(indicator),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> PivotIndicatorDaily",
				"split1@weekly pivot(groupBy(year_week,",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          source,",
				"          AdlLoadTime),",
				"     pivotBy(indicator),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> PivotIndicatorWeekly",
				"PivotIndicatorWeekly, AggregateDim join(year_week == ecdc_year_week,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinDates",
				"ImportDates aggregate(groupBy(ecdc_year_week = year+'-W'+lpad(week_of_year,2,'0')),",
				"     weekStartDate = min(date),",
				"          weekEndDate = max(date)) ~> AggregateDim",
				"JoinDates sort(asc(year_week, true),",
				"     asc(country, true)) ~> WeeklySort",
				"PivotIndicatorDaily sort(asc(reported_date, true),",
				"     asc(country, true)) ~> DailySort",
				"WeeklySort sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkWeekly",
				"DailySort sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkDaily"
			]
		}
	}
}